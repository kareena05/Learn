Observables:
		the container which emits/ produces the data(the youtube channel)
data: 
		the data emitted by the observable
Subscribe:
		when we want to use the data emitted by observables,we subscribe it
		(the notifications we receive when something changes to data of youtube channel)
		observable does not produce data untill it is used , inshort jab tk hum subscribe nhi krte / use nhi krte tb tk observable data nhi deta
css me scss nahi chlta
scss me css chlta hai



promises  vs obeservables

1. promises returns resolve or reject
  obs returns stream of data
2. promises are async
   obs can be async or sync


whenever we use async it will always return a promise

getdata.then(data=>console.log(data)) is same as getdata.then(console.log)

to set the default child path you can use e mpty string
 {path:'observables',component:ObservablesComponent,children:[
    //like this {path:'',component:AllComponent}
  ]}

ngOnInit:
	code inside ngOnInit is executed when the component is initialized completely but not has rendered yet
so it's best place to perform some tasks like use external resources or fetch some default values
it is better to use ngOnInit instead of constructor bcoz it can perform asyn task also
@Input is accessible inside ngOnInit but not in constructor


In Angular, @ViewChild is a decorator used to query and access child elements or components within a template or component class. It allows you to obtain a reference to a DOM element or an Angular component defined in the template and use it in your component code.

elementref-> direct access to DOM element
viewChild -> access to child elements and components

ElementRef is a class provided by Angular that is used to obtain a reference to a DOM element in your Angular component. 
ElementRef provides direct access to the DOM, manipulating the DOM directly is generally discouraged in Angular applications
@ViewChild('myButton') is used to query for a DOM element with the template reference variable #myButton.

The ngAfterViewInit method is a lifecycle hook in Angular that gets called after the view of the component has been initialized.
 - good place to perform tasks that involve manipulating the DOM or interacting with elements in the view
- because, at this point, the view and its child elements are ready and accessible.
 fromEvent(this.addBtn.nativeElement,'click').subscribe(res=>
      {console.log("btn clicked")});}
1.Form-event:

formevent fucntion ek observable create krta hai and 
 It listens for the 'click' event on the addBtn.nativeElement

-subscribe is where you define what happens when the 'click' event occurs.
usage: to handle the events(just like addEventListner in js)

2.Interval 
const intervalVideos = interval(2000);
usage:to perform actions for every interval of specific second

3. Timer
usage: same as interval but interval starts immediately for every 1000 (1 second) you specified and timer starts after delayed seconds 2000(2 seconds) you specified

const timerVideos = timer(2000,1000);

4.Of and From
Of:
usage:the of function in RxJS is used to create observables from a fixed set of values.

From:
usage:The from operator is used to create an observable from an iterable, array-like, or promise-based source. It takes an iterable, an array, a promise, or any object that has an iterable property, and it emits each item from the source one at a time.


5.ToArray()
usage convertes observables to array

6.Custom Observable
usage: to create our owm custom observable


create custom observable:

const customObs = Observable.create((observer:any)=>{
    //emit the data
    observer.next("Angular"); //is the method to emit the data
      observer.error(new Error("Error has occured"));//is the method to throw error and terminate observable
      observer.complete() //is the method to complete the observable


} 
Now subscribe to that observable:
that subscribe method takes 3 callback fucntions (data,error,complete)one for each

 customObs.subscribe((res: any)=>{
    console.log(res);
  },
  (err:any)=>{
    console.log(err);
  },
  (completed:any)=>{
    console.log(completed);
  }




