<strong [ngClass]="{'text-success': statusTag==2,
                'text-danger' :statusTag==3}">       {{status}}   {{statusTag}}</strong>
        <table class="table" border="1" *ngIf="apidata!=null">


a perfect way to use Ng class to add or remove class dynamically 
the statement writtern after : colon is a condition

 DebounceTime and DistinctUntilChanged:
        DebounceTime: you can set some time to process the request
                      i.e after 1000 (1 second) the searched data will be displayed on screen
                      mainly used for searching when user types the entire word then after 1
                      second the request will return the response
                      ->Debounce is like telling your code to chill for a bit before reacting to a user's input.
                      It waits for a specified amount of time after the last event is emitted and then triggers the action.
                      This is great for scenarios like search bars where you don't want to make a 
                      request for every keystroke.
        DistinctUntilChanged: for the same input as before , the  new request won't be sent
                              the new request will be handled only if the input is changed.
                              ->is the gatekeeper of uniqueness. It ensures that the action is only triggered
                               if the current value is different from the previous one.
                               This is handy when you want to ignore repeated consecutive values          
 
 
 Subject and Behavious Subject:
 
 Subject:

A Subject is a special type of observable in RxJS that can act as both an observer and an observable.
It allows values to be multicasted to multiple observers. When a Subject receives any new value, it will immediately notify all its subscribers.
Subjects are both producers and consumers of observable values.

BehaviorSubject:

A BehaviorSubject is a type of subject that has a "current value" or "initial value" and emits it to subscribers when they subscribe.
same as Subject additionaly it has the default/initial value.


In RxJS, a ReplaySubject is a type of subject that extends the functionality
 of a regular subject by recording and replaying multiple values to its 
 subscribers. When a new observer subscribes to a ReplaySubject,
  it will receive not only the new values emitted by the subject
   but also a specified number of previously emitted values.
ex: const replaySubject = new ReplaySubject<number>(2);

// Subscribe to the ReplaySubject
replaySubject.subscribe(data => console.log(`Observer 1: ${data}`));

// (Emit)Next values into the ReplaySubject
replaySubject.next("kareena");

AsyncSubject:
In RxJS, an AsyncSubject is another type of subject that, 
similar to other subjects, can act as both an observer and an observable. 
However, it has a special behavior: 
it only emits the last value emitted by the AsyncSubject when it completes.
i.e create -> const asyncSubject = new AsyncSubject<number>();
it emits data when you do :asyncSubject.complete();

In RxJS, completing an observable means notifying its subscribers 
that no more values will be emitted. When an observable completes, 
it sends a "complete" notification to its observers, indicating that
the sequence of emissions is finished, and there won't be any more values.